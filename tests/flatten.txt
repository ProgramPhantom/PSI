let s = {
  text: "text",
  embed: {
    num: 14,
    embed2: {
      info: "deep"
    }
  },
  list: [1, 4],
  num2: 23,
  notHere: null
}

function FlattenObj(obj: any) {
  var keyval = Object.entries(obj);
  let newObj = {}

  keyval.forEach(([key, val]) => {
    if (typeof val === "object" &&
      !Array.isArray(val) &&
      val !== null) {

      
      

      newObj = {
        ...newObj,
        ...FlattenObj(val)
      };
      

    } else {
			newObj[key] = val;
    }

    
  })

  return newObj;
}
var f = FlattenObj(s);


static fullParse(defaults: any, args: any) {
        for (var [key, val] of Object.entries(args)) {
            
    
            if (typeof val === "object" && // If val is object ei {}
                !Array.isArray(val) &&
                val !== null) {
                    
                    SequenceHandler.fullParse(defaults[key], val)
            } else {
                if (Array.isArray(defaults[key])) {
                    
                    try {
                        args[key] = JSON.parse("" + val)
                    } catch {
                        throw new ScriptIssue(ArgumentError.ARGUMENT_INVALID_TYPE, `The argument '${key}' cannot be parsed to type 'array`)
                    }
                    
                } else if (typeof defaults[key] === "number") {
                    args[key] = parseFloat(val + "");
                }
            }
    
        } 
    }