import React, {useEffect, useState, useRef, useLayoutEffect} from 'react';
import * as ReactDOM from 'react-dom';
import { Control, Controller, FieldValue, FieldValues, FormProvider, useForm, useFormContext, useWatch } from 'react-hook-form';
import { IText } from '../vanilla/text';
import { Button, ControlGroup, FormGroup, HTMLSelect, InputGroup, NumericInput, Section, Slider, Switch, Tab, Tabs, Tooltip } from "@blueprintjs/core";
import { IVisual, Visual } from '../vanilla/visual';
import { FormRequirements } from './FormHolder';
import LabelGroup, { ILabelGroup } from '../vanilla/labelGroup';

interface ILabelGroupProps extends FormRequirements {
    target: LabelGroup
}


const VisualForm: React.FC<ILabelGroupProps> = (props) => {
    const formControls = useFormContext<ILabelGroup>();

    

    return (
        <ControlGroup>
            <Tabs defaultSelectedTabId={"core"}>
                <Tab style={{userSelect: "none", position: "sticky"}} id={"core"} title={"Core"} panel={
                        <FormProvider {...coreFormControls}>
                            <ElementForm target={props.target}></ElementForm>
                        </FormProvider>
                }></Tab>
            

            <Tab style={{userSelect: "none"}} id={"label"} title={"Label"} panel={
                <>
                    <p style={{display: "inline-block"}}>Use Labels</p>
                    <Switch onChange={() => {setLabelType(!labelType)}} checked={labelType} 
                            style={{display: "inline-block", marginLeft: "10px"}}></Switch>
                    
                    { labelType ? 
                    <FormProvider {...labelFormControls}>
                        <LabelMapForm target={props.target}></LabelMapForm> 
                    </FormProvider>
                    : <></>}
                </>
            }></Tab>
            </Tabs>
        </ControlGroup>
    );
}
    
export default VisualForm