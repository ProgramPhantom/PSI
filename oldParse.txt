parseNMRScript() {
        if (this.nmrScript === "") {return;}


        // Converts script into objects
        
        
        var lines: string[] = this.nmrScript.split("\n");

        for (let lineNum = 0; lineNum<lines.length; lineNum++) {
            var line = lines[lineNum];
            if (line === "") {continue;}
            this.errors = [];

            var commandType = line[0];

            line.replace(" ", "");

            switch (commandType) {
                case "":
                    this.errors.push(new ScriptSyntaxError(SyntaxErrorType.NULL_LINE, "Empty Line"));
                    break;
                case "/":
                    continue;
                case "$":
                    // var commandEval = this.parseCommand(line, lineNum);
                    var openTex = line.indexOf("$");
                    var closeTex = line.lastIndexOf("$");

                    if (openTex === closeTex) {
                        throw new ScriptSyntaxError(SyntaxErrorType.TEX_TAG_NOT_CLOSED,
                            "You must enclose LaTeX in $ on line " + lineNum);
                    }

                    var tex = line.substring(1, closeTex);
                    var config = line.substring(closeTex+1, line.length);

                    let args = this.parseCommand( "$" + config, lineNum)
                    args.arguments["text"] = tex;

                    

                    var newLab = Label.anyArgConstruct(args.arguments);
                    this.freeLabels.push(newLab);

                    break;
                case "~":
                    var commandEval = this.parseCommand(line, lineNum);
                    let jsonArgs = commandEval.arguments;

                    this.defineChannel(commandEval.commandBody, jsonArgs);


                    
                    break;  

                default:
                    try {
                        this.parseDefaultLine(line, lineNum);
                    } catch (e) {
                        // do stuff innit
                        throw e;
                    }
                        
                
                    break;

            }
        }
    }
parseCommand(line: string, lineNum: number): {commandBody: string, arguments: any} {

        

        var openIndex = line.indexOf("(")  // Open
        if (openIndex == -1) {
            throw new ScriptSyntaxError(SyntaxErrorType.MISSING_BRACKETS, 
                    "Missing open bracket on line " + lineNum);
        }

        var body = line.substring(1, openIndex);
        if ((Sequence.specialCharacters.some(v => body.includes(v)))) {
            throw new ScriptSyntaxError(SyntaxErrorType.INVALID_CHANNEL_IDENTIFIER,
                            "Invalid character in command on line " + lineNum);
        }

        var closeIndex = line.indexOf(")")  // Close
        if (closeIndex == -1) {
            throw new ScriptSyntaxError(SyntaxErrorType.MISSING_BRACKETS, 
                    "Missing close bracket on line " + lineNum);
        }
        
        // Args
        var argumentString = line.substring(openIndex+1, closeIndex);
        var jsonArg = this.parseArgument(argumentString);

        return {commandBody: body, arguments: jsonArg}
    }

    parseDefaultLine(line: string, lineNum: number) {
        var dotIndex = line.indexOf(".");
        var openIndex = line.indexOf("(");
        var closeIndex = line.indexOf(")");


        if (dotIndex === -1) {
            throw new ScriptSyntaxError(SyntaxErrorType.EXPRESSION_NO_EFFECT, 
                        "Expression has no effect");  
        }
        if (openIndex == -1 || closeIndex == -1) {
            throw new ScriptSyntaxError(SyntaxErrorType.MISSING_BRACKETS, 
                "Missing brackets on line " + lineNum);
        }

        var channelIdentifier = line.substring(0, dotIndex);
        if (!(Object.keys(this.channels).includes(channelIdentifier))) {
             throw new ScriptSyntaxError(SyntaxErrorType.CHANNEL_IDENTIFIER_UNDEFINED,
                            "Unknown channel " + channelIdentifier);
        }
        
        var channelCommand = line.substring(dotIndex+1, openIndex);
        if (!(Sequence.AllCommands.includes(channelCommand))) {
            throw new ScriptSyntaxError(SyntaxErrorType.INVALID_CHANNEL_COMMAND,
                            "Unknown channel command '" + channelCommand + "'");
 
        }

        var argumentString = line.substring(openIndex+1, closeIndex);
        var jsonArg = this.parseArgument(argumentString);
        
        this.channelCommand(channelIdentifier, channelCommand, jsonArg);
    }

    parseArgument(argString: string) : any {
        if (argString !== "") {
            // So user does not need to write // for their tex
            argString = argString.replace("\\", "\\\\");
            

            try {
                var jsonArg = JSON.parse(argString);
            } catch (err) {
                throw new ScriptSyntaxError(SyntaxErrorType.ARGUMENT_ERROR,
                    "Argument error");
            }
        } else {
            var jsonArg = JSON.parse("{}");
        }

        return jsonArg;
    }

    channelCommand(channelName: string, commandName: string, args: any) {
        var channel: Channel = this.channels[channelName];
        var currTimestamp = channel.temporalElements.length;

        var sections: number[] = [];

        // This can be better
        if (Object.keys(Sequence.SimplePulseCommands).includes(commandName)) {
            sections = channel.addSimplePulse(Sequence.SimplePulseCommands[commandName], args);
        } else if (Object.keys(Sequence.ImagePulseCommands).includes(commandName)) {
            sections = channel.addImagePulse(Sequence.ImagePulseCommands[commandName], args);
        } else if (Object.keys(Sequence.Span).includes(commandName)) {
            // THIS NEEDS MAKING BETTER
            sections = channel.addSpan(Sequence.Span[commandName], args)
        } else if (Object.keys(Sequence.Abstract).includes(commandName)) {
            sections = channel.addAbstract(Sequence.Abstract[commandName], args);
            
        } else if (Sequence.ChannelCommands.includes(commandName)) {
            switch (commandName) {
                case "sync":
                    this.syncOn(channelName, args);
                    break;
                case "AnnotateLabel":
                    channel.addAnnotationLabel(args);
                    break;
                case "AnnotateLong":
                    channel.addAnnotationLong(args);
                    break;

            }
        }

        this.temporalSections.push(sections);
        
        this.computeTimespans();
        
    }


    addSimplePulse(elementType: typeof SimplePulse, args: any): number[] {
        this.elementCursor += 1;

        var pulse = elementType.anyArgConstruct(elementType, {...args, timestamp: this.elementCursor});
        this.temporalElements.push(pulse);


        this.hSections.push(pulse.actualWidth);
        return this.hSections;
    }

    addImagePulse(elementType: typeof ImagePulse, args: any): number[] {
        this.elementCursor += 1;

        var pulse = elementType.anyArgConstruct(elementType, {...args, timestamp: this.elementCursor});
        this.temporalElements.push(pulse);
        
        this.hSections.push(pulse.actualWidth);
        return this.hSections;
    }

    addSpan(elementType: typeof Span, args: any): number[] {
        this.elementCursor += 1;

        var span = elementType.anyArgConstruct(elementType, {...args, timestamp: this.elementCursor})

        this.temporalElements.push(span);
        this.hSections.push(span.actualWidth);
        
        return this.hSections;
    }